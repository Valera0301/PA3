// Вершинний шейдер
const vertexShaderSource = `
attribute vec3 inVertex;        // Вхідні координати вершини
attribute vec3 inNormal;        // Вхідна нормаль
attribute vec3 inTangent;       // Вхідний тангенс
attribute vec2 inTexCoords;     // Вхідні текстурні координати

varying vec3 outNormal;         // Нормаль у світовому просторі
varying vec3 outTangent;        // Тангенс у світовому просторі
varying vec3 outBitangent;      // Бітангенс у світовому просторі
varying vec2 outTexCoords;      // Текстурні координати
varying vec3 outPosition;       // Позиція фрагмента у світовому просторі

uniform mat4 ModelViewMatrix;           // Матриця моделі і виду
uniform mat4 ModelViewProjectionMatrix; // Матриця моделі, виду та проекції
uniform mat4 NormalMatrix;              // Матриця нормалей

void main() {
    // Трансформація нормалі з урахуванням нормальної матриці
    vec3 transformedNormal = normalize((NormalMatrix * vec4(inNormal, 0.0)).xyz);

    // Ортогоналізація тангенса відносно нормалі за допомогою методу Грама-Шмідта
    vec3 transformedTangent = inTangent - dot(inTangent, transformedNormal) * transformedNormal;
    
    // Перевірка орієнтації тангенса, щоб уникнути неприродного напрямку
    if (dot(transformedTangent, transformedNormal) < 0.0) {
        transformedTangent = -transformedTangent;  // Інвертуємо тангенс, якщо напрямок некоректний
    }

    // Нормалізація тангенса
    transformedTangent = normalize(transformedTangent);

    // Обчислення бітангенса через векторний добуток нормалі і тангенса
    vec3 transformedBitangent = cross(transformedNormal, transformedTangent);

    // Передача результатів у фрагментний шейдер
    outNormal = transformedNormal;
    outTangent = transformedTangent;
    outBitangent = transformedBitangent;
    outTexCoords = inTexCoords;

    // Обчислення позиції фрагмента у світовому просторі
    vec4 fragPosition = ModelViewMatrix * vec4(inVertex, 1.0);
    outPosition = fragPosition.xyz;

    // Обчислення фінальної позиції вершини
    gl_Position = ModelViewProjectionMatrix * vec4(inVertex, 1.0);
}
`;

// Фрагментний шейдер
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 outNormal;      // Нормаль у світовому просторі
varying vec3 outTangent;     // Тангенс у світовому просторі
varying vec3 outBitangent;   // Бітангенс у світовому просторі
varying vec2 outTexCoords;   // Текстурні координати
varying vec3 outPosition;    // Позиція фрагмента у світовому просторі

uniform vec3 lightPosition;   // Позиція джерела світла
uniform vec3 viewPosition;    // Позиція камери

uniform float ambientStrength;   // Інтенсивність амбієнтного освітлення
uniform float specularStrength;  // Інтенсивність спекулярного освітлення
uniform float shininess;         // Жорсткість поверхні

uniform sampler2D diffTexture;   // Дифузна текстура
uniform sampler2D specTexture;   // Дзеркальна текстура
uniform sampler2D normTexture;   // Нормальна текстура

void main() {
    // Витягнення нормалі з нормальної текстури
    vec3 normalMapValue = texture2D(normTexture, outTexCoords).rgb * 2.0 - 1.0;

    // Трансформація нормалі через матрицю TBN
    mat3 TBN = mat3(outTangent, outBitangent, outNormal);
    vec3 transformedNormal = normalize(TBN * normalMapValue);

    // Розрахунок освітлення
    vec3 lightDir = normalize(lightPosition - outPosition);  // Вектор до джерела світла
    vec3 viewDir = normalize(viewPosition - outPosition);    // Вектор до камери
    vec3 reflectDir = reflect(-lightDir, transformedNormal); // Відбитий вектор світла
    
    // Амбієнтне освітлення
    vec3 ambient = ambientStrength * texture2D(diffTexture, outTexCoords).rgb;

    // Диффузне освітлення
    float diff = max(dot(normalMapValue, lightDir), 0.1);
    vec3 diffuseColor = texture2D(diffTexture, outTexCoords).rgb;

    // Спекулярне освітлення
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specularColor = specularStrength * texture2D(specTexture, outTexCoords).rgb;

    // Обчислення фінального кольору
    vec3 finalColor = diff * diffuseColor + spec * specularColor + ambient;

    // Встановлення кінцевого кольору фрагмента
    gl_FragColor = vec4(finalColor, 1.0);
}
`;
